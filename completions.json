{
  "keywords": {
    "BEGIN": {
      "type": "keyword",
      "rightLabel": "built-in",
      "description": "A BEGIN rule is executed once only, before the first input record is read.",
      "docAnchor": "Using-BEGIN_002fEND"
    },
    "BINMODE": {
      "type": "variable",
      "description": "A BEGIN rule is executed once only, before the first input record is read.",
      "docAnchor": "Using-BEGIN_002fEND"
    },
    "END": {
      "type": "keyword",
      "rightLabel": "built-in",
      "description": "An END rule is executed once only, after all the input is read.",
      "docAnchor": "Using-BEGIN_002fEND"
    },
    "ENVIRON": {
      "type": "variable",
      "description": "An associative array containing the values of the environment.",
      "docAnchor": "Auto_002dset"
    },
    "and": {
      "type": "function",
      "snippet": "and(${1:v1}, ${2:v2})",
      "displayText": "and(v1, v2[, ...])",
      "description": "Return the bitwise AND of the arguments.",
      "docAnchor": "Bit_002dManipulation-Functions"
    },
    "asort": {
      "type": "function",
      "snippet": "asort(${1:source}, ${2:dest}, ${3:how})",
      "leftLabel": "int",
      "displayText": "asort(source[, dest, how])",
      "description": "Sorts the values of source.",
      "docAnchor": "String-Functions"
    },
    "atan2": {
      "type": "function",
      "snippet": "atan2(${1:y}, ${2:x})",
      "leftLabel": "float",
      "description": "Return the arctangent of y / x in radians.",
      "docAnchor": "Numeric-Functions-1"
    },
    "bindtextdomain": {
      "type": "function",
      "snippet": "bindtextdomain(${1:directory}, ${2:domain})",
      "displayText": "bindtextdomain(directory[, domain])",
      "description": "Set the directory in which gawk will look for message translation files, in case they will not or cannot be placed in the “standard” locations (e.g., during testing).",
      "docAnchor": "String_002dTranslation-Functions"
    },
    "close": {
      "type": "function",
      "snippet": "close(${1:filename}, ${2:how})",
      "displayText": "close(filename[, how])",
      "description": "Close the file filename for input or output.",
      "docAnchor": "Input_002fOutput-Functions"
    },
    "compl": {
      "type": "function",
      "snippet": "compl(${1:val})",
      "description": "Return the bitwise complement of val.",
      "docAnchor": "Bit_002dManipulation-Functions"
    },
    "cos": {
      "type": "function",
      "snippet": "cos(${1:x})",
      "leftLabel": "float",
      "description": "Return the cosine of x, with x in radians.",
      "docAnchor": "Numeric-Functions-1"
    },
    "dcgettext": {
      "type": "function",
      "snippet": "dcgettext(${1:string}, ${2:domain}, ${3:category})",
      "displayText": "dcgettext(string[, domain], category]])",
      "description": "Return the translation of string in text domain domain for locale category category.",
      "docAnchor": "String_002dTranslation-Functions"
    },
    "dcngettext": {
      "type": "function",
      "snippet": "dcngettext(${1:string1}, ${2:string2}, ${3:number}, ${4:domain}, ${5:category})",
      "displayText": "dcngettext(string1, string2, number[, domain], category]])",
      "description": "Return the plural form used for number of the translation of string1 and string2 in text domain domain for locale category category.",
      "docAnchor": "String_002dTranslation-Functions"
    },
    "exp": {
      "type": "function",
      "snippet": "exp(${1:x})",
      "leftLabel": "float",
      "description": "Return the exponential of x (e ^ x) or report an error if x is out of range.",
      "docAnchor": "Numeric-Functions-1"
    },
    "fflush": {
      "type": "function",
      "snippet": "fflush(${1:filename})",
      "displayText": "fflush([filename])",
      "description": "Flush any buffered output associated with filename, which is either a file opened for writing or a shell command for redirecting output to a pipe or coprocess.",
      "docAnchor": "Input_002fOutput-Functions"
    },
    "gensub": {
      "type": "function",
      "snippet": "gensub(${1:regexp}, ${2:replacement}, ${3:how}, ${4:target})",
      "displayText": "gensub(regexp, replacement, how[, target])",
      "leftLabel": "string",
      "description": "Search the target string target for matches of the regular expression regexp.",
      "docAnchor": "String-Functions"
    },
    "gsub": {
      "type": "function",
      "snippet": "gsub(${1:regexp}, ${2:replacement}, ${3:target})",
      "displayText": "gsub(regexp, replacement[, target])",
      "leftLabel": "int",
      "description": "Search target for all of the longest, leftmost, nonoverlapping matching substrings it can find and replace them with replacement.",
      "docAnchor": "String-Functions"
    },
    "index": {
      "type": "function",
      "snippet": "index(${1:in}, ${2:find})",
      "description": "Search the string in for the first occurrence of the string find, and return the position in characters where that occurrence begins in the string in.",
      "docAnchor": "String-Functions"
    },
    "int": {
      "type": "function",
      "snippet": "int(${1:x})",
      "leftLabel": "int",
      "description": "Return the nearest integer to x, located between x and zero and truncated toward zero.",
      "docAnchor": "Numeric-Functions-1"
    },
    "isarray": {
      "type": "function",
      "snippet": "isarray(${1:x})",
      "leftLabel": "BOOL",
      "description": "Return a true value if x is an array. Otherwise, return false.",
      "docAnchor": "Getting-Type-Information"
    },
    "length": {
      "type": "function",
      "snippet": "length(${1:string})",
      "displayText": "length([string])",
      "description": "Return the number of characters in string.",
      "docAnchor": "String-Functions"
    },
    "log": {
      "type": "function",
      "snippet": "log(${1:x})",
      "leftLabel": "float",
      "description": "Return the natural logarithm of x, if x is positive; otherwise, return NaN (“not a number”) on IEEE 754 systems.",
      "docAnchor": "Numeric-Functions-1"
    },
    "lshift": {
      "type": "function",
      "snippet": "lshift(${1:val}, ${2:count})",
      "description": "Return the value of val, shifted left by count bits.",
      "docAnchor": "Bit_002dManipulation-Functions"
    },
    "match": {
      "type": "function",
      "snippet": "match(${1:string}, ${2:regexp}, ${3:array})",
      "displayText": "match(string, regexp[, array])",
      "description": "Search string for the longest, leftmost substring matched by the regular expression regexp and return the character position (index) at which that substring begins (one, if it starts at the beginning of string). If no match is found, return zero.",
      "docAnchor": "String-Functions"
    },
    "mktime": {
      "type": "function",
      "snippet": "mktime(${1:datespec})",
      "description": "Turn datespec into a timestamp in the same form as is returned by systime().",
      "docAnchor": "Time-Functions-1"
    },
    "or": {
      "type": "function",
      "snippet": "or(${1:v1}, ${2:v2})",
      "displayText": "or(v1, v2[, ...])",
      "description": "Return the bitwise OR of the arguments.",
      "docAnchor": "Bit_002dManipulation-Functions"
    },
    "patsplit": {
      "type": "function",
      "snippet": "patsplit(${1:string}, ${2:array}[, ${3:fieldpat}[, ${4:seps}]])",
      "displayText": "patsplit(string, array[, fieldpat[, seps]])",
      "description": "Divide string into pieces defined by fieldpat and store the pieces in array and the separator strings in the seps array.",
      "docAnchor": "String-Functions"
    },
    "rand": {
      "type": "function",
      "snippet": "rand()",
      "leftLabel": "float",
      "description": "Return a random number.",
      "docAnchor": "Numeric-Functions-1"
    },
    "rshift": {
      "type": "function",
      "snippet": "rshift(${1:val}, ${2:count})",
      "description": "Return the value of val, shifted right by count bits.",
      "docAnchor": "Bit_002dManipulation-Functions"
    },
    "sin": {
      "type": "function",
      "snippet": "sin(${1:x})",
      "leftLabel": "float",
      "description": "Return the sine of x, with x in radians.",
      "docAnchor": "Numeric-Functions-1"
    },
    "split": {
      "type": "function",
      "snippet": "split(${1:string}, ${2:array}[, ${3:fieldsep}[, ${4:seps}]])",
      "displayText": "split(string, array[, fieldsep[, seps]])",
      "description": "Divide string into pieces separated by fieldsep and store the pieces in array and the separator strings in the seps array.",
      "docAnchor": "String-Functions"
    },
    "sprintf": {
      "type": "function",
      "snippet": "sprintf(${1:format}, ${2:expression1})",
      "displayText": "sprintf(format, expression1, ...)",
      "description": "Return (without printing) the string that printf would have printed out with the same arguments.",
      "docAnchor": "String-Functions"
    },
    "sqrt": {
      "type": "function",
      "snippet": "sqrt(${1:x})",
      "description": "Return the positive square root of x.",
      "docAnchor": "Numeric-Functions-1"
    },
    "srand": {
      "type": "function",
      "snippet": "srand(${1:x})",
      "displayText": "srand([x])",
      "description": "Set the starting point, or seed, for generating random numbers to the value x.",
      "docAnchor": "Numeric-Functions-1"
    },
    "strftime": {
      "type": "function",
      "snippet": "strftime(${1:format}, ${2:timestamp}, ${3:utc-flag})",
      "displayText": "strftime([format[, timestamp[, utc-flag]]])",
      "description": "Format the time specified by timestamp based on the contents of the format string and return the result.",
      "docAnchor": "Time-Functions-1"
    },
    "strtonum": {
      "type": "function",
      "snippet": "strtonum(${1:str})",
      "description": "Examine str and return its numeric value.",
      "docAnchor": "String-Functions"
    },
    "sub": {
      "type": "function",
      "snippet": "strtonum(${1:regexp}, ${2:replacement}, ${3:target})",
      "displayText": "sub(regexp, replacement[, target])",
      "description": "Search target, which is treated as a string, for the leftmost, longest substring matched by the regular expression regexp.",
      "docAnchor": "String-Functions"
    },
    "substr": {
      "type": "function",
      "snippet": "substr(${1:string}, ${2:start}, ${3:length})",
      "displayText": "substr(string, start[, length])",
      "description": "Return a length-character-long substring of string, starting at character number start.",
      "docAnchor": "String-Functions"
    },
    "system": {
      "type": "function",
      "snippet": "system(${1:command})",
      "description": "Execute the operating system command command and then return to the awk program. Return command’s exit status.",
      "docAnchor": "Input_002fOutput-Functions"
    },
    "systime": {
      "type": "function",
      "snippet": "systime()",
      "description": "Return the current time as the number of seconds since the system epoch.",
      "docAnchor": "Time-Functions-1"
    },
    "tolower": {
      "type": "function",
      "snippet": "tolower(${1:string})",
      "description": "Return a copy of string, with each uppercase character in the string replaced with its corresponding lowercase character.",
      "docAnchor": "String-Functions"
    },
    "toupper": {
      "type": "function",
      "snippet": "toupper(${1:string})",
      "description": "Return a copy of string, with each lowercase character in the string replaced with its corresponding uppercase character.",
      "docAnchor": "String-Functions"
    },
    "xor": {
      "type": "function",
      "snippet": "xor(${1:v1}, ${2:v2})",
      "displayText": "xor(v1, v2[, ...])",
      "description": "Return the bitwise XOR of the arguments.",
      "docAnchor": "Bit_002dManipulation-Functions"
    }
  }
}
